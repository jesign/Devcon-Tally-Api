<?php
/**
 * Created by PhpStorm.
 * User: jesign
 * Date: 7/19/19
 * Time: 9:06 PM
 */

namespace Tests\Http;


use App\Criteria;
use App\Event;
use App\Participant;
use App\ParticipantScore;
use App\User;
use Faker\Factory;
use Faker\Generator;
use Laravel\Passport\Passport;
use Tests\TestCase;

class ParticipantTest extends TestCase
{
    protected $event;
    protected $eventUrlPrefix;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->event = factory(Event::class)->create();

        $user = create(User::class);

        Passport::actingAs($user);

        $this->eventUrlPrefix = 'api/events/' . $this->event->id;
    }

    public function testParticipantIndex()
    {
        factory(Participant::class, 5)->create([
            'event_id' => $this->event
        ]);

        $response = $this->json('GET',$this->eventUrlPrefix . '/participants');
        $response->assertStatus(200);
    }

    public function testParticipantCreate()
    {

        $data = [
            'name' => 'John Doe'
        ];

        $response = $this->json('POST',$this->eventUrlPrefix . '/participants', $data);

        $response->assertStatus(200)->assertJson($data);
    }

    public function testParticipantUpdate()
    {
        $participant = factory(Participant::class)->create();
        $data = [
            'id' => $participant->id,
            'name' => 'Updated Name'
        ];

        $response = $this->json('POST',$this->eventUrlPrefix . '/participants', $data);

        $response->assertStatus(200)->assertJson($data);
    }

    public function testParticipantDelete() {
        $participant = factory(Participant::class)->create();

        $response = $this->json('POST',$this->eventUrlPrefix . '/participants/' . $participant->id . '/delete');

        $response->assertStatus(200)->assertJson([
            'success' => true
        ]);
    }

    public function testAllParticipantsScoreFromEvent(){
        $faker = Factory::create();

        factory(ParticipantScore::class, 3)->create([
            'criteria_id' => factory(Criteria::class)->create([
                'name' => 'Relevance',
                'max_points' => 20,
                'percentage' => 30
            ]),
            'participant_id' => factory(Participant::class)->create(['event_id' => $this->event->id])->id,
            'score' => $faker->numberBetween(0, 20)
        ]);

        factory(ParticipantScore::class, 3)->create([
            'criteria_id' => factory(Criteria::class)->create([
                'name' => 'Creativity',
                'max_points' => 15,
                'percentage' => 40
            ]),
            'participant_id' => factory(Participant::class)->create(['event_id' => $this->event->id])->id,
            'score' => $faker->numberBetween(0, 15)
        ]);

        factory(ParticipantScore::class, 3)->create([
            'criteria_id' => factory(Criteria::class)->create([
                'name' => 'Uniqueness',
                'max_points' => 20,
                'percentage' => 30
            ]),
            'participant_id' => factory(Participant::class)->create(['event_id' => $this->event->id])->id,
            'score' => $faker->numberBetween(0, 20)
        ]);

        $response = $this->json('GET',$this->eventUrlPrefix . '/participants/scores');
        $response->assertStatus(200);
    }
}